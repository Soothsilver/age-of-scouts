using System;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;

namespace Cother
{
    /// <summary>
    /// Serialization-enabling class that can save and load serializables objects to binary files in AppData directory.
    /// Keep in mind to generate a different GUID for every game!
    /// </summary>
    public static class SaveLoad
    {
        /// <summary>
        /// Holds the last exception generated by this class. All exceptions are usually suppressed.
        /// </summary>
        public static Exception LastError = null;

        /// <summary>
        /// Returns true only if a session was stored in the slot.
        /// </summary>
        public static bool DoesSavedGameExist(string applicationName, int slot)
        {
            string fileName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), applicationName, "save" + slot + ".sav");
            if (File.Exists(fileName))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Reloads a serialized file into memory. Returns NULL on failure.
        /// Keep in mind to generate a different GUID for every game!
        /// </summary>
        /// <typeparam name="T">Type of object to deserialize</typeparam>
        /// <param name="applicationName">This name is used to create the folder to hold saves game data.</param>
        /// <param name="slot">Where did you save the session?</param>
        /// <returns>The deserialized object; or null if failure.</returns>
        public static T LoadSession<T>(string applicationName, int slot)
        {
            string fileName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), applicationName, "save" + slot + ".sav");
            if (!File.Exists(fileName))
                return default(T);
            try
            {
                T toReturn;
                using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read))
                {
                    BinaryFormatter bf = new BinaryFormatter();
                    toReturn = (T)bf.Deserialize(fs);
                    fs.Flush();
                }
                return toReturn;
            }
            catch (Exception error)
            {
                LastError = error;
                return default(T);
            }
        }
        /// <summary>
        /// Binary serializes the session into a file and puts it in the app's AppData folder.
        /// Keep in mind to generate a different GUID for every game!
        /// </summary>
        /// <param name="session">The object to serialize.</param>
        /// <param name="slot">An arbitrary number. Use this number to reload the object.</param>
        /// <returns>Success?</returns>
        public static bool SaveSession(object session, int slot)
        {
            try
            {
                string fileName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Princess Civilization", "save" + slot + ".sav");
                if (!File.Exists(fileName))
                {
                    Directory.CreateDirectory(Path.GetDirectoryName(fileName) ?? ":FAIL:");
                }
                using (FileStream fs = new FileStream(fileName, FileMode.OpenOrCreate, FileAccess.Write))
                {
                    BinaryFormatter bf = new BinaryFormatter();
                    bf.Serialize(fs, session);
                    fs.Flush();
                }
                return true;
            }
            catch (Exception e)
            {
                LastError = e;
                return false;
            }
        }
    }
}
